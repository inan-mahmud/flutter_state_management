// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/features/home/data/entities/category_entity.dart';
import 'src/features/todo/data/entities/todo_entity.dart';
import 'src/features/user_profile/data/entity/user_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6848051843973750637),
      name: 'CategoryEntity',
      lastPropertyId: const IdUid(5, 2855717816864190171),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8851284691176375205),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4332862999620941104),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4951578403033103094),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 1609956993769315913),
            relationTarget: 'UserEntity'),
        ModelProperty(
            id: const IdUid(4, 2231288387448193202),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2855717816864190171),
            name: 'updatedAt',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'todos', srcEntity: 'TodoEntity', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(2, 8674029403964626081),
      name: 'TodoEntity',
      lastPropertyId: const IdUid(9, 1380786025019093210),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2021897535670199867),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7042568006049717648),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 156644406320574988),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6732327608318392931),
            name: 'isDone',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1051693490217126939),
            name: 'isImportant',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6319585489477536795),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 7236215816285656044),
            relationTarget: 'CategoryEntity'),
        ModelProperty(
            id: const IdUid(7, 6237137262047748236),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 1458294110807907963),
            relationTarget: 'UserEntity'),
        ModelProperty(
            id: const IdUid(8, 7723279877325950793),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1380786025019093210),
            name: 'updatedAt',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 1041259315090196693),
      name: 'UserEntity',
      lastPropertyId: const IdUid(3, 5323217069608808919),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7912455094688571189),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1811306061798902167),
            name: 'userName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5323217069608808919),
            name: 'email',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'categories', srcEntity: 'CategoryEntity', srcField: ''),
        ModelBacklink(name: 'todos', srcEntity: 'TodoEntity', srcField: '')
      ])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 1041259315090196693),
      lastIndexId: const IdUid(3, 1458294110807907963),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    CategoryEntity: EntityDefinition<CategoryEntity>(
        model: _entities[0],
        toOneRelations: (CategoryEntity object) => [object.user],
        toManyRelations: (CategoryEntity object) => {
              RelInfo<TodoEntity>.toOneBacklink(6, object.id,
                  (TodoEntity srcObject) => srcObject.category): object.todos
            },
        getId: (CategoryEntity object) => object.id,
        setId: (CategoryEntity object, int id) {
          object.id = id;
        },
        objectToFB: (CategoryEntity object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addInt64(2, object.user.targetId);
          fbb.addInt64(3, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(4, object.updatedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final object = CategoryEntity(
              id: idParam,
              title: titleParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam);
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.user.attach(store);
          InternalToManyAccess.setRelInfo<CategoryEntity>(
              object.todos,
              store,
              RelInfo<TodoEntity>.toOneBacklink(
                  6, object.id, (TodoEntity srcObject) => srcObject.category));
          return object;
        }),
    TodoEntity: EntityDefinition<TodoEntity>(
        model: _entities[1],
        toOneRelations: (TodoEntity object) => [object.category, object.user],
        toManyRelations: (TodoEntity object) => {},
        getId: (TodoEntity object) => object.id,
        setId: (TodoEntity object, int id) {
          object.id = id;
        },
        objectToFB: (TodoEntity object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addBool(3, object.isDone);
          fbb.addBool(4, object.isImportant);
          fbb.addInt64(5, object.category.targetId);
          fbb.addInt64(6, object.user.targetId);
          fbb.addInt64(7, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(8, object.updatedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final isDoneParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final isImportantParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0));
          final object = TodoEntity(
              id: idParam,
              title: titleParam,
              description: descriptionParam,
              isDone: isDoneParam,
              isImportant: isImportantParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.category.attach(store);
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.user.attach(store);
          return object;
        }),
    UserEntity: EntityDefinition<UserEntity>(
        model: _entities[2],
        toOneRelations: (UserEntity object) => [],
        toManyRelations: (UserEntity object) => {
              RelInfo<CategoryEntity>.toOneBacklink(3, object.id,
                      (CategoryEntity srcObject) => srcObject.user):
                  object.categories,
              RelInfo<TodoEntity>.toOneBacklink(
                      7, object.id, (TodoEntity srcObject) => srcObject.user):
                  object.todos
            },
        getId: (UserEntity object) => object.id,
        setId: (UserEntity object, int id) {
          object.id = id;
        },
        objectToFB: (UserEntity object, fb.Builder fbb) {
          final userNameOffset = fbb.writeString(object.userName);
          final emailOffset = fbb.writeString(object.email);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userNameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final userNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = UserEntity(
              id: idParam, userName: userNameParam, email: emailParam);
          InternalToManyAccess.setRelInfo<UserEntity>(
              object.categories,
              store,
              RelInfo<CategoryEntity>.toOneBacklink(
                  3, object.id, (CategoryEntity srcObject) => srcObject.user));
          InternalToManyAccess.setRelInfo<UserEntity>(
              object.todos,
              store,
              RelInfo<TodoEntity>.toOneBacklink(
                  7, object.id, (TodoEntity srcObject) => srcObject.user));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [CategoryEntity] entity fields to define ObjectBox queries.
class CategoryEntity_ {
  /// see [CategoryEntity.id]
  static final id =
      QueryIntegerProperty<CategoryEntity>(_entities[0].properties[0]);

  /// see [CategoryEntity.title]
  static final title =
      QueryStringProperty<CategoryEntity>(_entities[0].properties[1]);

  /// see [CategoryEntity.user]
  static final user = QueryRelationToOne<CategoryEntity, UserEntity>(
      _entities[0].properties[2]);

  /// see [CategoryEntity.createdAt]
  static final createdAt =
      QueryIntegerProperty<CategoryEntity>(_entities[0].properties[3]);

  /// see [CategoryEntity.updatedAt]
  static final updatedAt =
      QueryIntegerProperty<CategoryEntity>(_entities[0].properties[4]);
}

/// [TodoEntity] entity fields to define ObjectBox queries.
class TodoEntity_ {
  /// see [TodoEntity.id]
  static final id =
      QueryIntegerProperty<TodoEntity>(_entities[1].properties[0]);

  /// see [TodoEntity.title]
  static final title =
      QueryStringProperty<TodoEntity>(_entities[1].properties[1]);

  /// see [TodoEntity.description]
  static final description =
      QueryStringProperty<TodoEntity>(_entities[1].properties[2]);

  /// see [TodoEntity.isDone]
  static final isDone =
      QueryBooleanProperty<TodoEntity>(_entities[1].properties[3]);

  /// see [TodoEntity.isImportant]
  static final isImportant =
      QueryBooleanProperty<TodoEntity>(_entities[1].properties[4]);

  /// see [TodoEntity.category]
  static final category = QueryRelationToOne<TodoEntity, CategoryEntity>(
      _entities[1].properties[5]);

  /// see [TodoEntity.user]
  static final user =
      QueryRelationToOne<TodoEntity, UserEntity>(_entities[1].properties[6]);

  /// see [TodoEntity.createdAt]
  static final createdAt =
      QueryIntegerProperty<TodoEntity>(_entities[1].properties[7]);

  /// see [TodoEntity.updatedAt]
  static final updatedAt =
      QueryIntegerProperty<TodoEntity>(_entities[1].properties[8]);
}

/// [UserEntity] entity fields to define ObjectBox queries.
class UserEntity_ {
  /// see [UserEntity.id]
  static final id =
      QueryIntegerProperty<UserEntity>(_entities[2].properties[0]);

  /// see [UserEntity.userName]
  static final userName =
      QueryStringProperty<UserEntity>(_entities[2].properties[1]);

  /// see [UserEntity.email]
  static final email =
      QueryStringProperty<UserEntity>(_entities[2].properties[2]);
}
